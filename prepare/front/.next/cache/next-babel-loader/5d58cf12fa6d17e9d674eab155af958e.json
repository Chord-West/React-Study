{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\n//takeLatest 실수로 2번 클릭한거 방지 ( 마지막 클릭한 것을 실행 )\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n} // call과 fork 의 차이는 fork는 비동기, call은 동기\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS' //data : result.data,\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","delay","fork","put","takeLatest","axios","logInAPI","data","post","logOutAPI","action","type","response"],"mappings":";;oDAWUA,K;qDAgBAC,M;qDAeAC,U;qDAGAC,W;qDAGeC,Q;;AA/CzB;AACA,SAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAwBD,IAAxB,CAAP;AACH;;AACD,SAASE,SAAT,GAAoB;AAChB,SAAOJ,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH,C,CACD;;;AACA,SAAUb,KAAV,CAAgBe,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAME,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG,gBADD;AAENJ,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMJ,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG,gBADD;AAENJ,YAAAA,IAAI,EAAG,YAAIK,QAAJ,CAAaL;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUX,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAME,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG,iBADD,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMR,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG,iBADD;AAENJ,YAAAA,IAAI,EAAG,aAAIK,QAAJ,CAAaL;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAAC,gBAAD,EAAkBT,KAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,iBAAD,EAAmBR,MAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACJ,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\r\n//takeLatest 실수로 2번 클릭한거 방지 ( 마지막 클릭한 것을 실행 )\r\nimport {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login',data);\r\n}\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\n// call과 fork 의 차이는 fork는 비동기, call은 동기\r\nfunction* logIn(action){\r\n    try {\r\n        // const result= yield call(logInAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : action.data,\r\n\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type : 'LOG_IN_FAILURE',\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* logOut(){\r\n    try {\r\n        //const result= yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_OUT_SUCCESS',\r\n            //data : result.data,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type : 'LOG_OUT_FAILURE',\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST',logIn); //login\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST',logOut);\r\n}\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}