{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from './user';\nimport post from '/post';\nimport { combineReducers } from \"redux\";\nconst initialState = {\n  user: {},\n  post: {}\n}; // (이전상태, 액션 ) => 다음상태\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    // 서버사이드 렌더링을 위한 index reducer 추가 \n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        // 초기화할때 없으면 undefined가 됨\n        return state;\n    }\n  },\n  // user 리듀서랑 ,post 합쳐준것\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AACA,SAAQC,eAAR,QAA8B,OAA9B;AAEA,MAAMC,YAAY,GAAE;AAChBH,EAAAA,IAAI,EAAC,EADW;AAGhBC,EAAAA,IAAI,EAAG;AAHS,CAApB,C,CAOA;;AACA,MAAMG,WAAW,GAAGF,eAAe,CAAC;AAChCG,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAYC,MAAZ,KAAuB;AAAE;AAChC,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKT,OAAL;AACIU,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAWD,KAAX,GAAqBC,MAAM,CAACI,OAA5B;;AAEJ;AAAU;AACN,eAAOL,KAAP;AANR;AAQC,GAV+B;AAWhC;AACAN,EAAAA,IAZgC;AAahCC,EAAAA;AAbgC,CAAD,CAAnC;AAgBA,eAAeG,WAAf","sourcesContent":["import {HYDRATE} from \"next-redux-wrapper\";\r\nimport user from './user';\r\nimport post from '/post';\r\nimport {combineReducers} from \"redux\";\r\n\r\nconst initialState ={\r\n    user:{\r\n    },\r\n    post : {\r\n    }\r\n}\r\n\r\n// (이전상태, 액션 ) => 다음상태\r\nconst rootReducer = combineReducers({\r\n    index: (state = {},action) => { // 서버사이드 렌더링을 위한 index reducer 추가 \r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            console.log('HYDRATE', action)\r\n            return {...state, ...action.payload};\r\n\r\n        default : // 초기화할때 없으면 undefined가 됨\r\n            return state;\r\n        }\r\n    },\r\n    // user 리듀서랑 ,post 합쳐준것\r\n    user,\r\n    post,\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}