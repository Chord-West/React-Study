{"ast":null,"code":"//takeLatest 실수로 2번 클릭한거 방지 ( 마지막 클릭한 것을 실행 )\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n} // call과 fork 의 차이는 fork는 비동기, call은 동기\n\n\nfunction* logIn(action) {\n  try {\n    // const result= yield call(logInAPI,action.data);\n    console.log(\"sagaLogin\");\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    //const result= yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS //data : result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n} // call과 fork 의 차이는 fork는 비동기, call은 동기\n\n\nfunction* signUp(action) {\n  try {\n    // const result= yield call(signUpAPI,action.data);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); //login\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","data","post","logOutAPI","logIn","action","console","log","type","err","error","response","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AACA;AACA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,EAMqBC,eANrB,EAMsCC,eANtC,EAMuDC,eANvD,QAOO,kBAPP;;AASA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAwBD,IAAxB,CAAP;AACH;;AACD,SAASE,SAAT,GAAoB;AAChB,SAAOb,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH,C,CACD;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMrB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGf,cADD;AAENQ,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAKH,GATD,CASC,OAAMQ,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGjB,cADD;AAENmB,MAAAA,KAAK,EAAGD,GAAG,CAACE,QAAJ,CAAaV;AAFf,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUW,MAAV,GAAkB;AACd,MAAI;AACA;AACA,UAAM1B,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGZ,eADD,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMa,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGd,eADD;AAENO,MAAAA,IAAI,EAAGQ,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASY,SAAT,GAAoB;AAChB,SAAOvB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH,C,CACD;;;AACA,UAAUY,MAAV,CAAiBT,MAAjB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGT,eADD;AAENE,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAKH,GARD,CAQC,OAAMQ,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGX,eADD;AAENa,MAAAA,KAAK,EAAGD,GAAG,CAACE,QAAJ,CAAaV;AAFf,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUc,UAAV,GAAsB;AAClB,QAAM1B,UAAU,CAACG,cAAD,EAAgBY,KAAhB,CAAhB,CADkB,CACsB;AAC3C;;AACD,UAAUY,WAAV,GAAuB;AACnB,QAAM3B,UAAU,CAACM,eAAD,EAAiBiB,MAAjB,CAAhB;AACH;;AAED,UAAUK,WAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACS,eAAD,EAAiBgB,MAAjB,CAAhB;AACH;;AACD,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMjC,GAAG,CAAC,CACNE,IAAI,CAAC4B,UAAD,CADE,EAEN5B,IAAI,CAAC6B,WAAD,CAFE,EAGN7B,IAAI,CAAC8B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["\r\n//takeLatest 실수로 2번 클릭한거 방지 ( 마지막 클릭한 것을 실행 )\r\nimport {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS\r\n} from \"../reducers/user\";\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login',data);\r\n}\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\n// call과 fork 의 차이는 fork는 비동기, call은 동기\r\nfunction* logIn(action){\r\n    try {\r\n        // const result= yield call(logInAPI,action.data);\r\n        console.log(\"sagaLogin\")\r\n        yield delay(1000);\r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n            data : action.data,\r\n\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type : LOG_IN_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* logOut(){\r\n    try {\r\n        //const result= yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : LOG_OUT_SUCCESS,\r\n            //data : result.data,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type : LOG_OUT_FAILURE,\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI(){\r\n    return axios.post('/api/signUp');\r\n}\r\n// call과 fork 의 차이는 fork는 비동기, call은 동기\r\nfunction* signUp(action){\r\n    try {\r\n        // const result= yield call(signUpAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n            data : action.data,\r\n\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST,logIn); //login\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut);\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST,signUp);\r\n}\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}