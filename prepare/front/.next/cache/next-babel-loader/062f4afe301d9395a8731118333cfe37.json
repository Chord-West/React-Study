{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; //데이터를 바꾸고 싶으면 Action을 만들어 주면 된다.\n// const changeNickname = {\n//     type : 'CHANGE_NICKNAME',\n//     data : 'boogicho',\n// }\n// 데이터를 정적으로 바꾸는것보단 객체를 액션으로 만들어 동적으로 바꾸는게 좋다. (Action Creator )\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n}; //  ex ) changeNickname('hyeonseo');\n// (이전상태, 액션 ) => 다음상태\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 참조 관계 유지\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","changeNickname","rootReducer","state","action"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AAEA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,UAAU,EAAG,KADZ;AAEDD,IAAAA,IAAI,EAAG,IAFN;AAGDE,IAAAA,UAAU,EAAC,EAHV;AAIDC,IAAAA,SAAS,EAAC;AAJT,GADW;AAOhBC,EAAAA,IAAI,EAAG;AACHC,IAAAA,SAAS,EAAG;AADT;AAPS,CAApB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAS;AAChC,SAAM;AACFC,IAAAA,IAAI,EAAE,QADJ;AAEFD,IAAAA;AAFE,GAAN;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAK;AAC7B,SAAM;AACFD,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJM,C,CAMP;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,cAAc,GAAIH,IAAD,IAAS;AAC5B,SAAM;AACFC,IAAAA,IAAI,EAAG,iBADL;AAEFD,IAAAA;AAFE,GAAN;AAIH,CALD,C,CAMA;AAEA;;;AACA,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAEb,YAAR,EAAqBc,MAArB,KAA+B;AAC/C,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKV,OAAL;AACI,6CAAWc,KAAX,GAAoBC,MAApB;;AACJ,SAAK,QAAL;AACI,6CACOD,KADP;AACc;AACVZ,QAAAA,IAAI,kCACGY,KAAK,CAACZ,IADT;AAEAC,UAAAA,UAAU,EAAG,IAFb;AAGAD,UAAAA,IAAI,EAAGa,MAAM,CAACN;AAHd;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOK,KADP;AAEIZ,QAAAA,IAAI,kCACGY,KAAK,CAACZ,IADT;AAEAC,UAAAA,UAAU,EAAG,KAFb;AAGAD,UAAAA,IAAI,EAAG;AAHP;AAFR;;AAQJ;AACI,aAAOY,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from \"next-redux-wrapper\";\r\n\r\nconst initialState ={\r\n    user:{\r\n        isLoggedIn : false,\r\n        user : null,\r\n        signUpData:{},\r\n        loginData:{},\r\n    },\r\n    post : {\r\n        mainPosts : [],\r\n    }\r\n}\r\n\r\nexport const loginAction = (data) =>{\r\n    return{\r\n        type: 'LOG_IN',\r\n        data,\r\n    }\r\n}\r\n\r\nexport const logoutAction = () =>{\r\n    return{\r\n        type: 'LOG_OUT',\r\n    }\r\n}\r\n\r\n//데이터를 바꾸고 싶으면 Action을 만들어 주면 된다.\r\n// const changeNickname = {\r\n//     type : 'CHANGE_NICKNAME',\r\n//     data : 'boogicho',\r\n// }\r\n// 데이터를 정적으로 바꾸는것보단 객체를 액션으로 만들어 동적으로 바꾸는게 좋다. (Action Creator )\r\nconst changeNickname = (data) =>{\r\n    return{\r\n        type : 'CHANGE_NICKNAME',\r\n        data,\r\n    }\r\n}\r\n//  ex ) changeNickname('hyeonseo');\r\n\r\n// (이전상태, 액션 ) => 다음상태\r\nconst rootReducer = (state= initialState,action) =>{\r\n    switch (action.type){\r\n        case HYDRATE:\r\n            return {...state,...action}\r\n        case 'LOG_IN':\r\n            return{\r\n                ...state, // 참조 관계 유지\r\n                user:{\r\n                    ...state.user,\r\n                    isLoggedIn : true,\r\n                    user : action.data,\r\n                },\r\n            };\r\n        case 'LOG_OUT':\r\n            return{\r\n                ...state,\r\n                user:{\r\n                    ...state.user,\r\n                    isLoggedIn : false,\r\n                    user : null,\r\n                },\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}