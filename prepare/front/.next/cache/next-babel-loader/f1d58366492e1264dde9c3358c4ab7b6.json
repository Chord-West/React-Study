{"ast":null,"code":"//takeLatest 실수로 2번 클릭한거 방지 ( 마지막 클릭한 것을 실행 )\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n} // call과 fork 의 차이는 fork는 비동기, call은 동기\n\n\nfunction* logIn(action) {\n  try {\n    // const result= yield call(logInAPI,action.data);\n    console.log(\"sagaLogin\");\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    //const result= yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS' //data : result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); //login\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","logInAPI","data","post","logOutAPI","logIn","action","console","log","type","err","response","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AACA;AACA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAwBD,IAAxB,CAAP;AACH;;AACD,SAASE,SAAT,GAAoB;AAChB,SAAOJ,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH,C,CACD;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,gBADD;AAENP,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAKH,GATD,CASC,OAAMQ,GAAN,EAAU;AACP,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,gBADD;AAENP,MAAAA,IAAI,EAAGQ,GAAG,CAACC,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUU,MAAV,GAAkB;AACd,MAAI;AACA;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,iBADD,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMC,GAAN,EAAU;AACP,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,iBADD;AAENP,MAAAA,IAAI,EAAGQ,GAAG,CAACC,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUW,UAAV,GAAsB;AAClB,QAAMd,UAAU,CAAC,gBAAD,EAAkBM,KAAlB,CAAhB,CADkB,CACwB;AAC7C;;AACD,UAAUS,WAAV,GAAuB;AACnB,QAAMf,UAAU,CAAC,iBAAD,EAAmBa,MAAnB,CAAhB;AACH;;AACD,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMpB,GAAG,CAAC,CACNE,IAAI,CAACgB,UAAD,CADE,EAENhB,IAAI,CAACiB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["\r\n//takeLatest 실수로 2번 클릭한거 방지 ( 마지막 클릭한 것을 실행 )\r\nimport {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login',data);\r\n}\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\n// call과 fork 의 차이는 fork는 비동기, call은 동기\r\nfunction* logIn(action){\r\n    try {\r\n        // const result= yield call(logInAPI,action.data);\r\n        console.log(\"sagaLogin\")\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : action.data,\r\n\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type : 'LOG_IN_FAILURE',\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* logOut(){\r\n    try {\r\n        //const result= yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_OUT_SUCCESS',\r\n            //data : result.data,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type : 'LOG_OUT_FAILURE',\r\n            data : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST',logIn); //login\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST',logOut);\r\n}\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}