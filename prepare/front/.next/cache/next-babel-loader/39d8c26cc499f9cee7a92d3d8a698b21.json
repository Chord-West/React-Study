{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  user: {},\n  post: {}\n}; //데이터를 바꾸고 싶으면 Action을 만들어 주면 된다.\n// const changeNickname = {\n//     type : 'CHANGE_NICKNAME',\n//     data : 'boogicho',\n// }\n// 데이터를 정적으로 바꾸는것보단 객체를 액션으로 만들어 동적으로 바꾸는게 좋다. (Action Creator )\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n}; //  ex ) changeNickname('hyeonseo');\n// (이전상태, 액션 ) => 다음상태\n\n\nimport user from './user';\nimport post from '/post';\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      // 초기화할때 없으면 undefined가 됨\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","changeNickname","data","type","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AAEA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,IAAI,EAAC,EADW;AAGhBC,EAAAA,IAAI,EAAG;AAHS,CAApB,C,CAQA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAS;AAC5B,SAAM;AACFC,IAAAA,IAAI,EAAG,iBADL;AAEFD,IAAAA;AAFE,GAAN;AAIH,CALD,C,CAMA;AAEA;;;AACA,OAAOH,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,OAAjB;;AAEA,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAEP,YAAR,EAAqBQ,MAArB,KAA+B;AAC/C,UAAQA,MAAM,CAACH,IAAf;AACI,SAAKN,OAAL;AACIU,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,MAAtB;AACA,6CAAWD,KAAX,GAAoBC,MAAM,CAACG,OAA3B;;AAEJ;AAAU;AACN,aAAOJ,KAAP;AANR;AAQH,CATD;;AAWA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from \"next-redux-wrapper\";\r\n\r\nconst initialState ={\r\n    user:{\r\n    },\r\n    post : {\r\n    }\r\n}\r\n\r\n\r\n//데이터를 바꾸고 싶으면 Action을 만들어 주면 된다.\r\n// const changeNickname = {\r\n//     type : 'CHANGE_NICKNAME',\r\n//     data : 'boogicho',\r\n// }\r\n// 데이터를 정적으로 바꾸는것보단 객체를 액션으로 만들어 동적으로 바꾸는게 좋다. (Action Creator )\r\nconst changeNickname = (data) =>{\r\n    return{\r\n        type : 'CHANGE_NICKNAME',\r\n        data,\r\n    }\r\n}\r\n//  ex ) changeNickname('hyeonseo');\r\n\r\n// (이전상태, 액션 ) => 다음상태\r\nimport user from './user';\r\nimport post from '/post';\r\n\r\nconst rootReducer = (state= initialState,action) =>{\r\n    switch (action.type){\r\n        case HYDRATE:\r\n            console.log('HYDRATE',action)\r\n            return {...state,...action.payload};\r\n\r\n        default : // 초기화할때 없으면 undefined가 됨\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}