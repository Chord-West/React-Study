{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해쉬태크 #익스프레스',\n    Images: [{\n      src: 'https://i.imgur.com/Bf97WeF.png'\n    }, {\n      src: 'https://i.imgur.com/Bf97WeF.png'\n    }, {\n      src: 'https://i.imgur.com/Bf97WeF.png'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      comment: '우와 개정판이 나왔군요'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      comment: '얼른 사고싶어요'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        // 앞에 추가해야 게시글 쓰면 가장 위에 올라감\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n      const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","comment","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","generate","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    mainPosts : [{\r\n        id : 1,\r\n        User :{\r\n            id:1,\r\n            nickname : '제로초',\r\n        },\r\n        content :'첫 번째 게시글 #해쉬태크 #익스프레스',\r\n        Images : [\r\n            { src:'https://i.imgur.com/Bf97WeF.png' },\r\n            { src:'https://i.imgur.com/Bf97WeF.png' },\r\n            { src:'https://i.imgur.com/Bf97WeF.png' },\r\n        ],\r\n        Comments:[{\r\n          User:{\r\n              nickname: 'nero',\r\n          },\r\n            comment:'우와 개정판이 나왔군요',\r\n        }, {\r\n            User:{\r\n                nickname: 'hero',\r\n            },\r\n            comment: '얼른 사고싶어요',\r\n        }],\r\n    }],\r\n    imagePaths:[],\r\n    addPostLoading:false,\r\n    addPostDone:false,\r\n    addPostError:null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\nexport const addComment = (data) => ({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n    id:shortId.generate(),\r\n    content : data,\r\n    User :{\r\n        id:1,\r\n        nickname:'제로초',\r\n    },\r\n    Images:[],\r\n    Comments:[],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id:shortId.generate(),\r\n    content : data,\r\n    User :{\r\n        id:1,\r\n        nickname:'제로초',\r\n    },\r\n\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts], // 앞에 추가해야 게시글 쓰면 가장 위에 올라감\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            };\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            };\r\n        case ADD_COMMENT_SUCCESS:\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            const post = { ...state.mainPosts[postIndex] };\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = post;\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            };\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}