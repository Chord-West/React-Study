{"ast":null,"code":"// Redux 담당\n// Redux를 써야 하는 이유\n// 중앙 데이터 저장소 역할 , 컴포넌트가 필요로 할때 부분적으로 지원 ( React에서는 Context API 가 담당 )\nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from '../reducers';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getstate = _ref.getstate;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) // 배포용 미들웨어\n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); //개발용 미들웨어 (히스토리가 쌓임 => 보안에 취약할 수 있기 때문에 개발용에만 장착)\n\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // 기본적인 셋팅\n\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/user/Desktop/Project/WEB-Study/React-Study/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","reducer","createSagaMiddleware","rootSaga","loggerMiddleware","dispatch","getstate","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAAQC,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAEC,QAAF,QAAEA,QAAF;AAAA,MAAWC,QAAX,QAAWA,QAAX;AAAA,SAAyB,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAW;AACnEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACH,KAHiD;AAAA,GAAzB;AAAA,CAAzB;;AAKA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAK;AACxB,MAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AACA,MAAMW,WAAW,GAAE,CAACD,cAAD,EAAgBR,gBAAhB,CAAnB;AACA,MAAMU,QAAQ,GAAG,QACfhB,OAAO,CAACD,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CADQ,CAC0B;AAD1B,IAEXb,mBAAmB,CAACH,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CAFzB,CAHwB,CAKmC;;AAC3D,MAAME,KAAK,GAAGhB,WAAW,CAACE,OAAD,EAASa,QAAT,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACH,CATD,C,CAWA;;;AACA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["// Redux 담당\r\n// Redux를 써야 하는 이유\r\n// 중앙 데이터 저장소 역할 , 컴포넌트가 필요로 할때 부분적으로 지원 ( React에서는 Context API 가 담당 )\r\n\r\nimport {createWrapper} from 'next-redux-wrapper';\r\nimport {applyMiddleware, compose, createStore} from \"redux\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport reducer from '../reducers';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\nconst loggerMiddleware = ({dispatch,getstate}) => (next) => (action) =>{\r\n    console.log(action);\r\n    return next(action);\r\n};\r\n\r\nconst configureStore = () =>{\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares =[sagaMiddleware,loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV ==='production'\r\n    ? compose(applyMiddleware(...middlewares)) // 배포용 미들웨어\r\n        : composeWithDevTools(applyMiddleware(...middlewares)) //개발용 미들웨어 (히스토리가 쌓임 => 보안에 취약할 수 있기 때문에 개발용에만 장착)\r\n    const store = createStore(reducer,enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\n// 기본적인 셋팅\r\nconst wrapper = createWrapper(configureStore, { debug : process.env.NODE_ENV === 'development',});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}